/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2009-2015 FoundationDB, LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.foundationdb.sql.embedded;

import com.foundationdb.ais.model.Column;
import com.foundationdb.ais.model.Table;
import com.foundationdb.server.error.ErrorCode;

import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

abstract class ExecuteAutoGeneratedKeys
{
    public abstract List<Column> getTargetColumns(Table targetTable);

    static ExecuteAutoGeneratedKeys of(int autoGeneratedKeys) {
        switch (autoGeneratedKeys) {
        case Statement.NO_GENERATED_KEYS:
            return null;
        case Statement.RETURN_GENERATED_KEYS:
            return new ExecuteAutoGeneratedKeys() {
                    @Override
                    public List<Column> getTargetColumns(Table targetTable) {
                        Column identityColumn = targetTable.getIdentityColumn();
                        if (identityColumn == null)
                            return Collections.emptyList();
                        else
                            return Collections.singletonList(identityColumn);
                    }
                };
        default:
            throw new IllegalArgumentException("Invalid autoGeneratedKeys: " + autoGeneratedKeys);
        }
    }

    static ExecuteAutoGeneratedKeys of(final int[] columnIndexes) {
        return new ExecuteAutoGeneratedKeys() {
                @Override
                public List<Column> getTargetColumns(Table targetTable) {
                    List<Column> result = new ArrayList<>();
                    for (int i = 0; i < columnIndexes.length; i++) {
                        int columnIndex = columnIndexes[i];
                        if ((columnIndex < 1) || (columnIndex > targetTable.getColumns().size())) {
                            throw JDBCException.wrapped("Invalid column index: " + columnIndex, ErrorCode.NO_INDEX);
                        }
                        result.add(targetTable.getColumns().get(columnIndex - 1));
                    }
                    return result;
                }
            };
    }

    static ExecuteAutoGeneratedKeys of(final String[] columnNames) {
        return new ExecuteAutoGeneratedKeys() {
                @Override
                public List<Column> getTargetColumns(Table targetTable) {
                    List<Column> result = new ArrayList<>();
                    for (int i = 0; i < columnNames.length; i++) {
                        String columnName = columnNames[i];
                        Column column = targetTable.getColumn(columnName);
                        if (column == null) {
                            throw JDBCException.wrapped("Invalid column name: " + columnName, ErrorCode.NO_SUCH_COLUMN);
                        }
                        result.add(column);
                    }
                    return result;
                }
            };
    }

}
